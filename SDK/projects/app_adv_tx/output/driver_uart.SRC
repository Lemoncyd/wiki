; .\output\driver_uart.SRC generated from: driver\driver_uart.c
; COMPILER INVOKED BY:
;        C:\Keil51\C51\BIN\C51.EXE driver\driver_uart.c LARGE OPTIMIZE(9,SIZE) BROWSE NOAREGS DEBUG OBJECTEXTEND PRINT(.\lst\driver_uart.lst) SRC(.\output\driver_uart.SRC)

$NOMOD51

NAME	DRIVER_UART

RF_SPI_MISO	BIT	080H.3
RF_SPI_MOSI	BIT	080H.4
WDCTL	DATA	097H
CLK_EN_CFG	DATA	08FH
P0	DATA	080H
P1	DATA	090H
P2	DATA	0A0H
P3	DATA	0B0H
T0	BIT	0B0H.4
AC	BIT	0D0H.6
P4	DATA	0C0H
T1	BIT	0B0H.5
T2	BIT	090H.0
EA	BIT	0A8H.7
P0_PU	DATA	09AH
P1_PU	DATA	09BH
P2_PU	DATA	09CH
P3_PU	DATA	09DH
P4_PU	DATA	09EH
DPH1	DATA	085H
IE	DATA	0A8H
SPI0_CN	DATA	0F8H
FL	BIT	0D0H.1
DPL1	DATA	084H
EXF2	BIT	0C8H.6
RD	BIT	0B0H.7
P0_OPDR	DATA	0BAH
P1_OPDR	DATA	0BBH
PWM0C0	DATA	0A1H
P2_OPDR	DATA	0BCH
IP	DATA	0A9H
ARBLOST	BIT	0B8H.2
PWM1C0	DATA	0A4H
PWM0C1	DATA	0A2H
P3_OPDR	DATA	0BDH
RI	BIT	098H.0
PWM1C1	DATA	0A5H
PWM0C2	DATA	0A3H
P4_OPDR	DATA	0BEH
test_pin0	BIT	090H.0
SI	BIT	0B8H.0
INT0	BIT	0B0H.2
CY	BIT	0D0H.7
PWM1C2	DATA	0A6H
test_pin1	BIT	090H.1
TI	BIT	098H.1
INT1	BIT	0B0H.3
SMB_DAT	DATA	0B6H
test_pin2	BIT	090H.2
INT2	BIT	090H.4
P_EXP	DATA	0E6H
test_pin3	BIT	090H.3
RXD0	BIT	0B0H.0
INT3	BIT	090H.5
test_pin4	BIT	090H.4
RXD1	BIT	090H.2
INT4	BIT	090H.6
RF_SPI_CLK	BIT	080H.5
test_pin5	BIT	090H.5
TXD0	BIT	0B0H.1
INT5	BIT	090H.7
DES_CTL	DATA	0D1H
P0_WUEN	DATA	0C4H
test_pin6	BIT	090H.6
TXD1	BIT	090H.3
RNG_DAT	DATA	0EBH
P1_WUEN	DATA	0C5H
RCAP2H	DATA	0CBH
test_pin7	BIT	090H.7
PWMICTL	DATA	0A7H
P2_WUEN	DATA	0C6H
SP	DATA	081H
T2EX	BIT	090H.1
P3_WUEN	DATA	0C7H
OV	BIT	0D0H.2
P4_WUEN	DATA	0C9H
RCAP2L	DATA	0CAH
C_T2	BIT	0C8H.1
WR	BIT	0B0H.6
DES_INT	DATA	0D2H
MTP_ADR	DATA	0EEH
MTP_DAT	DATA	0EFH
RNG_CTL	DATA	0ECH
RCLK	BIT	0C8H.5
EXIF	DATA	091H
TCLK	BIT	0C8H.4
PCON	DATA	087H
ANA_CFG0	DATA	0D8H
PALT	DATA	0E7H
RF_SPI_IRQ	BIT	080H.2
ANA_CFG1	DATA	0D9H
ANA_CFG2	DATA	0DAH
ANA_CFG3	DATA	0DBH
TMOD	DATA	089H
TCON	DATA	088H
ANA_CFG4	DATA	0DCH
DES_OUT	DATA	0D7H
MTP_CTL	DATA	0EDH
ANA_CFG5	DATA	0DDH
ANA_CFG6	DATA	0DEH
DS_WUEN	DATA	0C3H
ANA_CFG7	DATA	0DFH
IE0	BIT	088H.1
IE1	BIT	088H.3
MD0	DATA	0F1H
B	DATA	0F0H
MD1	DATA	0F2H
MD2	DATA	0F3H
CP_RL2	BIT	0C8H.0
MD3	DATA	0F4H
MD4	DATA	0F5H
MD5	DATA	0F6H
ACC	DATA	0E0H
ES0	BIT	0A8H.4
ET0	BIT	0A8H.1
ES1	BIT	0A8H.6
SMB_TMCTL	DATA	0B9H
ET1	BIT	0A8H.3
TF0	BIT	088H.5
ET2	BIT	0A8H.5
TF1	BIT	088H.7
EXINT_MOD	DATA	0EAH
TF2	BIT	0C8H.7
RB8	BIT	098H.2
SMB_CF	DATA	0B7H
TH0	DATA	08CH
EX0	BIT	0A8H.0
IT0	BIT	088H.0
TH1	DATA	08DH
RF_SPI_CE	BIT	080H.7
MASTER	BIT	0B8H.7
TB8	BIT	098H.3
EX1	BIT	0A8H.2
IT1	BIT	088H.2
SPI0_CFG	DATA	0F9H
TH2	DATA	0CDH
ACK	BIT	0B8H.1
EX2	BIT	0E8H.0
P	BIT	0D0H.0
EX3	BIT	0E8H.1
SM0	BIT	098H.7
TL0	DATA	08AH
EX4	BIT	0E8H.2
SM1	BIT	098H.6
TL1	DATA	08BH
EX5	BIT	0E8H.3
SM2	BIT	098H.5
TL2	DATA	0CCH
TXMODE	BIT	0B8H.6
EX6	BIT	0E8H.4
EIE	DATA	0E8H
EX7	BIT	0E8H.5
SMB_CN	DATA	0B8H
DES_IN	DATA	0D6H
LED	BIT	0A0H.0
EX8	BIT	0E8H.6
RS0	BIT	0D0H.3
ADCDH	DATA	095H
EX9	BIT	0E8H.7
TR0	BIT	088H.4
RS1	BIT	0D0H.4
TR1	BIT	088H.6
SPI0_DAT	DATA	0FBH
TR2	BIT	0C8H.2
DES_KEY1	DATA	0D3H
DES_KEY2	DATA	0D4H
ADCDL	DATA	094H
DES_KEY3	DATA	0D5H
RF_SPI_CS	BIT	080H.6
DPH	DATA	083H
SPI0_CKR	DATA	0FAH
P0_IOSEL	DATA	0AAH
EIP	DATA	0E9H
P1_IOSEL	DATA	0ABH
P2_IOSEL	DATA	0ACH
DPL	DATA	082H
P3_IOSEL	DATA	0ADH
SBUF0	DATA	099H
P4_IOSEL	DATA	0AEH
EXEN2	BIT	0C8H.3
SCON0	DATA	098H
REN	BIT	098H.4
T2CON	DATA	0C8H
DPS	DATA	086H
STA	BIT	0B8H.5
ADCTL	DATA	096H
MPAGE	DATA	092H
EICON	DATA	093H
CKCON	DATA	08EH
ACKRQ	BIT	0B8H.3
P0_PD	DATA	0B1H
F0	BIT	0D0H.5
MDCTL	DATA	0F7H
P1_PD	DATA	0B2H
STO	BIT	0B8H.4
P2_PD	DATA	0B3H
P3_PD	DATA	0B4H
P4_PD	DATA	0B5H
PSW	DATA	0D0H
?PR?driver_uart_initial?DRIVER_UART      SEGMENT CODE 
?PR?_driver_uart_send_start?DRIVER_UART  SEGMENT CODE 
	EXTRN	XDATA (uart_data_receive)
	EXTRN	CODE (_driver_buffer_set)
	EXTRN	XDATA (?_driver_buffer_set?BYTE)
	EXTRN	XDATA (uart_data_len_receive)
	EXTRN	XDATA (uart_data_send)
	EXTRN	XDATA (uart_data_count_send)
	EXTRN	XDATA (uart_data_len_send)
	PUBLIC	_driver_uart_send_start
	PUBLIC	driver_uart_initial
; /****************************************************************************
; **
; ** Copyright (C) 2011 Beken Corporation, All rights reserved.
; **
; ** Contact: Beken Corporation (www.beken.com)
; **
; ** Author:  river
; **
; ** History: 2012/03/07
; **
; ** Version: 1.0
; **
; ****************************************************************************/
; /*! \file driver_uart.c
;     \brief The driver interface of uart module.
; */
; 
; #include "headfile\includes.h"
; 
; #if defined(UART_LOOP) || defined(UART_INTERRUPT)
; 
; #define UART_BAUD_RATE_9600_16MHZ			            0xffcc      //(65536-(SYS_CLOCK/(32*9600)))
; #define UART_BAUD_RATE_9600_8MHZ		                0xffe6
; 
; #define UART_BAUD_RATE_38400_16MHZ			65523
; #define UART_BAUD_RATE_38400_8MHZ			65531
; 
; /*! \fn void driver_uart_initial(void)
;     \brief Initialize uart with the baud rate UART_BAUD_RATE. If the macro UART_INTERRUPT is defined, uart interrupt will be enabled.
; 
;     \param void
;     \return void
; */
; void driver_uart_initial(void)

	RSEG  ?PR?driver_uart_initial?DRIVER_UART
driver_uart_initial:
	USING	0
			; SOURCE LINE # 34
; {
			; SOURCE LINE # 35
;     CLK_EN_CFG |= 0x60;	    //timer & uart clock
			; SOURCE LINE # 36
	ORL  	CLK_EN_CFG,#060H
;     SCON0 = 0x50;                   //mode 1
			; SOURCE LINE # 37
	MOV  	SCON0,#050H
;     {
			; SOURCE LINE # 38
;         RCAP2H = UART_BAUD_RATE_38400_16MHZ>>8;
			; SOURCE LINE # 39
	MOV  	RCAP2H,#0FFH
;         RCAP2L = UART_BAUD_RATE_38400_16MHZ& 0xff;
			; SOURCE LINE # 40
	MOV  	RCAP2L,#0F3H
;         TH2 = UART_BAUD_RATE_38400_16MHZ>>8;
			; SOURCE LINE # 41
	MOV  	TH2,#0FFH
;         TL2 = UART_BAUD_RATE_38400_16MHZ& 0xff;
			; SOURCE LINE # 42
	MOV  	TL2,#0F3H
;     }
			; SOURCE LINE # 43
;     T2CON  = 0x30;              // rclk tclk = 1
			; SOURCE LINE # 44
	MOV  	T2CON,#030H
;     TR2 = 1;                        // start
			; SOURCE LINE # 45
	SETB 	TR2
;     SM2 = 0;                        // stop bit will NOT matter
			; SOURCE LINE # 46
	CLR  	SM2
;     PALT |= 0x80;
			; SOURCE LINE # 47
	ORL  	PALT,#080H
; 
;     #ifdef UART_INTERRUPT
;     ES0 = 1;                        // enable uart interrupt for read and write register debug
			; SOURCE LINE # 50
	SETB 	ES0
;     driver_buffer_set(uart_data_receive, 0, UART_DATA_LEN);
			; SOURCE LINE # 51
	MOV  	R3,#01H
	MOV  	R2,#HIGH (uart_data_receive)
	MOV  	R1,#LOW (uart_data_receive)
	MOV  	DPTR,#?_driver_buffer_set?BYTE+04H
	MOV  	A,#010H
	MOVX 	@DPTR,A
	CLR  	A
	MOV  	R5,A
	LCALL	_driver_buffer_set
;     uart_data_len_receive = 0;
			; SOURCE LINE # 52
	CLR  	A
	MOV  	DPTR,#uart_data_len_receive
	MOVX 	@DPTR,A
;     uart_data_len_send = 0;
			; SOURCE LINE # 53
	MOV  	DPTR,#uart_data_len_send
	MOVX 	@DPTR,A
;     #else
;     ES0 = 0;                        // disable uart interrupt for read and write register debug
;     #endif
; 
;     TI = 1;                          // TI:  set TI to send first char of UART
			; SOURCE LINE # 58
	SETB 	TI
; }
			; SOURCE LINE # 59
	RET  	
; END OF driver_uart_initial

; 
; #ifdef UART_INTERRUPT
; /*! \fn void driver_uart_send_start(UINT8 len)
;     \brief Send \a len bytes data stored in uart_data_send array by uart interrupt.
; 
;     \param len - the length of data
;     \return void
; */
; void driver_uart_send_start(UINT8 len)

	RSEG  ?PR?_driver_uart_send_start?DRIVER_UART
_driver_uart_send_start:
	USING	0
			; SOURCE LINE # 68
;---- Variable 'len?140' assigned to Register 'R7' ----
; {
			; SOURCE LINE # 69
;     uart_data_len_send = len;
			; SOURCE LINE # 70
	MOV  	DPTR,#uart_data_len_send
	MOV  	A,R7
	MOVX 	@DPTR,A
;     if(uart_data_len_send--)
			; SOURCE LINE # 71
	MOVX 	A,@DPTR
	MOV  	R7,A
	DEC  	A
	MOVX 	@DPTR,A
	MOV  	A,R7
	JZ   	?C0003
;     {
			; SOURCE LINE # 72
;         uart_data_count_send = 0;
			; SOURCE LINE # 73
	CLR  	A
	MOV  	DPTR,#uart_data_count_send
	MOVX 	@DPTR,A
;         SBUF0 = uart_data_send[uart_data_count_send++];
			; SOURCE LINE # 74
	MOVX 	A,@DPTR
	MOV  	R7,A
	INC  	A
	MOVX 	@DPTR,A
	MOV  	A,#LOW (uart_data_send)
	ADD  	A,R7
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (uart_data_send)
	MOV  	DPH,A
	MOVX 	A,@DPTR
	MOV  	SBUF0,A
;     }
			; SOURCE LINE # 75
; }
			; SOURCE LINE # 76
?C0003:
	RET  	
; END OF _driver_uart_send_start

	END
